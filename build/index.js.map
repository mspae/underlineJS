{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","js/baseline-ratio.js","js/index.js","js/multiple-underline.js","js/single-underline.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","underlinejs","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_typeof","Symbol","iterator","obj","constructor","root","factory","baselineRatio","undefined","elem","document","body","container","createElement","style","display","position","bottom","right","width","height","margin","padding","visibility","overflow","small","large","fontSize","innerHTML","appendChild","smalldims","getBoundingClientRect","largedims","removeChild","baselineposition","top",2,"underline","getElementStyles","element","$this","baselinePositionRatio","lineHeight","parseFloat","getComputedStyle","getPropertyValue","fontFamily","fontStyle","parentWidth","parentNode","offsetLeft","parentOffsetLeft","canvasLeft","textIndent","Underline","options","underlines","console","error","underlineStyles","text-underline-color","color","text-underline-position","text-underline-skip","skip","text-underline-width","querySelectorAll","forEach","el","elementStyles","MultipleUnderline","SingleUnderline","push","bind","requestAnimFrame","callback","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","prototype","animate","clear","update","draw","./baseline-ratio","./multiple-underline","./single-underline",3,"multipleUnderline","text","textContent","canvas","ctx","getContext","ratio","devicePixelRatio","left","font","multiplyValue","multipleRedrawActive","is_chrome","dotWidth","measureText","strokeWidth","underlinePosition","userUnderlinePosition","adjustValue","optimalStrokeWidthPos","posY","lines","myStrings","words","match","line","linePositionY","firstLineCount","newWord","replace","testLine","testLineMetrics","testLineWidth","lineMetrics","lineWidth","tempLine","lineText","lineTextIndent","lineMeasureWidth","myString","GuitarString","Point","drawUnderline","drawHoles","tempString","globalCompositeOperation","fillStyle","textBaseline","fillText","strokeStyle","strokeText","redrawActive","log","clearRect",4,"singleUnderline","textWidth","value","multiplier","str","m","result","Math","round","beginPath"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,YAAAV,MAAA,WAAA,GAAAG,EAAA,OAAA,SAAAQ,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GCCA,YAEA,IAAI0B,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,OAAS,eAAkBE,KCF1O,SAAUE,EAAMC,GACQ,kBAAX9B,IAAyBA,EAAOC,IAEzCD,EAAO,mBAAqB,WAC1B,MAAQ6B,GAAKE,cAAgBD,MAEH,YAAZ,mBAAAhC,GAAA,YAAA0B,EAAA1B,IAIhBC,EAAOD,QAAUgC,IAGjBD,EAAKE,cAAgBD,KAbxBE,OAeO,WACN,GAAID,GAAgB,SAASE,GAE3BA,EAAOA,GAAQC,SAASC,IAFS,IAK7BC,GAAYF,SAASG,cAAc,MACvCD,GAAUE,MAAMC,QAAU,QAC1BH,EAAUE,MAAME,SAAW,WAC3BJ,EAAUE,MAAMG,OAAS,IACzBL,EAAUE,MAAMI,MAAQ,IACxBN,EAAUE,MAAMK,MAAQ,MACxBP,EAAUE,MAAMM,OAAS,MACzBR,EAAUE,MAAMO,OAAS,IACzBT,EAAUE,MAAMQ,QAAU,IAC1BV,EAAUE,MAAMS,WAAa,SAC7BX,EAAUE,MAAMU,SAAW,QAfM,IAkB7BC,GAAQf,SAASG,cAAc,QAC/Ba,EAAQhB,SAASG,cAAc,OAnBFY,GAsB3BX,MAAMa,SAAW,MACvBD,EAAMZ,MAAMa,SAAW,SAEvBF,EAAMG,UAAY,IAClBF,EAAME,UAAY,IAElBhB,EAAUiB,YAAYJ,GACtBb,EAAUiB,YAAYH,GA7BWjB,EAgC5BoB,YAAYjB,EACjB,IAAIkB,GAAYL,EAAMM,wBAClBC,EAAYN,EAAMK,uBACtBtB,GAAKwB,YAAYrB,EAnCgB,IAsC7BsB,GAAmBJ,EAAUK,IAAMH,EAAUG,IAC7Cf,EAASY,EAAUZ,MAEvB,OAAO,GAAKc,EAAmBd,EAGjC,OAAOb,UDQH6B,GAAG,SAAS5C,EAAQjB,EAAOD,GACjC,YAEA,IAAI0B,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,OAAS,eAAkBE,KEvE1O,SAAUE,EAAMC,GACQ,kBAAX9B,IAAyBA,EAAOC,IAEzCD,EAAO,eAAiB,WACtB,MAAQ6B,GAAKgC,UAAY/B,MAEC,YAAZ,mBAAAhC,GAAA,YAAA0B,EAAA1B,IAIhBC,EAAOD,QAAUgC,IAGjBD,EAAKgC,UAAY/B,KAbpBE,OAeO,WAMN,QAAS8B,GAAiBC,GAExB,GAAIC,GAAQD,EAERE,EAAwBlC,EAAcgC,GACtCG,EAAaC,WAAWhE,OAAOiE,iBAAiBJ,EAAO,MACxDK,iBAAiB,gBAChBC,EAAanE,OAAOiE,iBAAiBJ,EAAO,MAC7CK,iBAAiB,eAChBlB,EAAWhD,OAAOiE,iBAAiBJ,EAAO,MAC3CK,iBAAiB,aAChBE,EAAYpE,OAAOiE,iBAAiBJ,EAAO,MAC5CK,iBAAiB,cAChB1B,EAAQqB,EAAMT,wBAAwBZ,MACtCC,EAASoB,EAAMT,wBAAwBX,OACvC4B,EAAcR,EAAMS,WAAWlB,wBAAwBZ,MAGvD+B,EAAaV,EAAMU,WACnBC,EAAmBX,EAAMS,WAAWC,WACpCE,EAAaD,EAAmBD,EAChCG,EAAaH,EAAaC,CArBG,QAyB/BT,WAAYA,EACZvB,MAAOA,EACPC,OAAQA,EACR4B,YAAaA,EACbF,WAAYA,EACZnB,SAAUA,EACVoB,UAAWA,EACXN,sBAAuBA,EACvBW,WAAYA,EACZC,WAAYA,GAWhB,QAASC,GAAUf,EAASgB,GAC1BzE,KAAK0E,cAEAjB,GACHkB,QAAQC,MAAM,sBAGhB,IAAIC,IACFC,uBAAwBL,EAAQM,OAAS,OACzCC,0BAA2BP,EAAQvC,UAAY,OAC/C+C,sBAAuBR,EAAQS,OAAQ,EACvCC,uBAAwBV,EAAQpC,OAAS,OAXRoB,GAgBN,gBAAZA,GAAuB7B,SAASwD,iBAAiB3B,GAAWA,KAG1E4B,QAAQtE,KAAK0C,EAAS,SAAS6B,GAChC,GACI/B,GADAgC,EAAgB/B,EAAiBC,EAInCF,GADEgC,EAAcjD,OAASiD,EAAc3B,WAC3B,GAAI4B,GAAkB/B,EAASoB,EAAiBU,GAGhD,GAAIE,GAAgBhC,EAASoB,EAAiBU,GAE5DvF,KAAK0E,WAAWgB,KAAKnC,IACrBoC,KAAK3F,OAhFT,GAAIyB,GAAgBf,EAAQ,oBACxB8E,EAAoB9E,EAAQ,wBAC5B+E,EAAkB/E,EAAQ,sBAyC1BkF,EAAmB,SAAUC,GAC/B,MAAOhG,QAAOiG,uBAAyBjG,OAAOkG,6BAA+BlG,OAAOmG,0BAA4BnG,OAAOoG,wBAA0BpG,OAAOqG,yBACtJ,SAASL,GACPhG,OAAOsG,WAAWN,EAAU,IAAO,OA6CzC,OARArB,GAAU4B,UAAUC,QAAU,WAC5BrG,KAAK0E,WAAWW,QAAQ,SAAS9B,GAC/BA,EAAU+C,QACV/C,EAAUgD,SACVhD,EAAUiD,QACVb,KAAK3F,OACP4F,EAAiB5F,KAAKqG,UAEjB7B,MFsENiC,mBAAmB,EAAEC,uBAAuB,EAAEC,qBAAqB,IAAIC,GAAG,SAASlG,EAAQjB,EAAOD,GACrG,YAEA,IAAI0B,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,OAAS,eAAkBE,KGpL1O,SAAUE,EAAMC,GACQ,kBAAX9B,IAAyBA,EAAOC,IAEzCD,EAAO,uBAAyB,WAC9B,MAAQ6B,GAAKsF,kBAAoBrF,MAEP,YAAZ,mBAAAhC,GAAA,YAAA0B,EAAA1B,IAIhBC,EAAOD,QAAUgC,IAGjBD,EAAKiE,kBAAoBhE,KAb5BE,OAeO,WACN,QAAS8D,GAAkB/B,EAASoB,EAAiBU,GAEnDvF,KAAKyD,QAAUA,EAEfzD,KAAK8G,KAAO9G,KAAKyD,QAAQsD,YAEzB/G,KAAK6E,gBAAkBA,EAN2C7E,KAS7DuF,cAAgBA,EAErBvF,KAAKgH,OAASpF,SAASG,cAAc,UACrC/B,KAAKiH,IAAMjH,KAAKgH,OAAOE,WAAW,MAGlClH,KAAKmH,MAAQtH,OAAOuH,iBACpBpH,KAAKgH,OAAO3E,MAAQrC,KAAKuF,cAAclD,MAAQrC,KAAKmH,MACpDnH,KAAKgH,OAAO1E,OAAStC,KAAKuF,cAAcjD,OAAStC,KAAKmH,MAjBYnH,KAmB7DgH,OAAOhF,MAAMqF,KAAOrH,KAAKuF,cAAcjB,WAAa,KACzDtE,KAAKyD,QAAQV,YAAY/C,KAAKgH,QAC9BhH,KAAKgH,OAAOhF,MAAMK,MAAQrC,KAAKuF,cAAclD,MAAQ,KAErDrC,KAAKiH,IAAIK,KAAOtH,KAAKsH,KAAOtH,KAAKuF,cAActB,UAAY,IAAMsD,cAAcvH,KAAKuF,cAAc1C,SAAU7C,KAAKmH,OAAS,IAAMnH,KAAKuF,cAAcvB,WAEnJhE,KAAKwH,sBAAuB,EACxBC,UAGFzH,KAAKuF,cAAc3B,WAAa5D,KAAKuF,cAAc3B,WAAa5D,KAAKmH,MAErEnH,KAAKuF,cAAc3B,WAAa5D,KAAKuF,cAAc3B,WAAa5D,KAAKmH,KA/BL,IAmC9DO,GAAW1H,KAAKiH,IAAIU,YAAY,KAArB,KAnCmD,IAoCd,QAAhD3H,KAAK6E,gBAAgB,wBAEvB7E,KAAK4H,YAAcF,EAAW,IAG9B1H,KAAK4H,YAAc5H,KAAK6E,gBAAgB,wBAFnC7E,KAIA4H,YAAc/D,WAAW7D,KAAK4H,aAAe5H,KAAKmH,OAKF,QAAnDnH,KAAK6E,gBAAgB,2BAEvB7E,KAAK6H,kBAAoBhE,WAAW7D,KAAKuF,cAAc1C,UAAY7C,KAAKmH,OAAS,EAAInH,KAAKuF,cAAc5B,sBAC3D,GAA3C3D,KAAKuF,cAAc5B,uBAA+B3D,KAAK4H,YAAc,MAClE,CAEL,GAAIE,GAAwBjE,WAAW7D,KAAK6E,gBAAgB,2BAFvD7E,MAIA6H,kBAAoBhE,WAAW7D,KAAKuF,cAAc1C,UAAY7C,KAAKmH,OACrE,EAAInH,KAAKuF,cAAc5B,sBACtB3D,KAAKuF,cAAc5B,sBAAwBmE,GAAyB9H,KAAK4H,YAAc,EAI7F,GAAIG,GAAcC,sBAAsBhI,KAAK4H,YAAa5H,KAAK6H,kBAC/D7H,MAAK4H,YAAcG,EAAYH,YAC/B5H,KAAK6H,kBAAoBE,EAAYE,KAErCjI,KAAKkI,SACLlI,KAAKmI,YAOL,KAAK,GALDC,GAAQpI,KAAK8G,KAAKuB,MAAM,iBACxBC,EAAO,GAEPC,EAAgB,EAChBC,EAAiB,EACZpI,EAAI,EAAGA,EAAIgI,EAAMpH,OAAQZ,IAAK,CAErC,GAAIgI,EAAMhI,GAAGiI,MAAM,QAAS,CAE1B,GAAII,GAAUL,EAAMhI,GAAGsI,QAAQ,OAAQ,IACnCC,EAAWL,EAAOG,EAClBG,EAAkB5I,KAAKiH,IAAIU,YAAYgB,GACvCE,EAAgBD,EAAgBvG,KACpCsG,IAAsB,QAEtB,IAAIA,GAAWL,EAAOF,EAAMhI,GACxBwI,EAAkB5I,KAAKiH,IAAIU,YAAYgB,GACvCE,EAAgBD,EAAgBvG,KAGtC,IAAKmG,EA4BH,GAAIK,EAAgB7I,KAAKuF,cAAcrB,YAAclE,KAAKmH,OAAS/G,EAAI,EAAG,CAExE,GAAIkI,EAAKD,MAAM,QAEb,GAAIS,GAAc9I,KAAKiH,IAAIU,YAAYW,EAAKI,QAAQ,OAAQ,KACxDK,EAAYD,EAAYzG,UAE5B,IAAIyG,GAAc9I,KAAKiH,IAAIU,YAAYW,GACnCS,EAAYD,EAAYzG,KAG9B,IAAI2G,IACFC,SAAUX,EACVY,gBAAiB,GACjBX,cAAeA,EACfY,iBAAkBJ,EAEpB/I,MAAKkI,MAAMxC,KAAKsD,GAEhBV,EAAOF,EAAMhI,GACbmI,GAAiBvI,KAAKuF,cAAc3B,eAEpC0E,GAAOK,MAhDT,IAAIE,EAAgB7I,KAAKuF,cAAchB,WAAavE,KAAKmH,MAAQnH,KAAKuF,cAAcrB,YAAclE,KAAKmH,OAAS/G,EAAI,EAAG,CAErH,GAAIkI,EAAKD,MAAM,QAEb,GAAIS,GAAc9I,KAAKiH,IAAIU,YAAYW,EAAKI,QAAQ,OAAQ,KACxDK,EAAYD,EAAYzG,UAE5B,IAAIyG,GAAc9I,KAAKiH,IAAIU,YAAYW,GACnCS,EAAYD,EAAYzG,KAG9B,IAAI2G,IACFC,SAAUX,EACVY,eAAgBlJ,KAAKuF,cAAchB,WAAavE,KAAKmH,MAAQ,GAC7DoB,cAAeA,EACfY,iBAAkBJ,EAEpB/I,MAAKkI,MAAMxC,KAAKsD,GAEhBV,EAAOF,EAAMhI,GACbmI,GAAiBvI,KAAKuF,cAAc3B,WACpC4E,QAEAF,GAAOK,EAlHqD,GAiJ9DL,EAAKD,MAAM,QAEb,GAAIS,GAAc9I,KAAKiH,IAAIU,YAAYW,EAAKI,QAAQ,OAAQ,KACxDK,EAAYD,EAAYzG,UAE5B,IAAIyG,GAAc9I,KAAKiH,IAAIU,YAAYW,GACnCS,EAAYD,EAAYzG,KAG9B,IAAI2G,IACFC,SAAUX,EACVY,gBAAiB,GACjBX,cAAeA,EACfY,iBAAkBJ,EAEpB/I,MAAKkI,MAAMxC,KAAKsD,EAChB,KAAK,GAAIrI,GAAI,EAAGA,EAAIX,KAAKkI,MAAMlH,OAAQL,IAAK,CAC1C,GAAIqI,GAAWhJ,KAAKkI,MAAMvH,GACtByI,EAAW,GAAIC,cACjBrJ,KAAKiH,IACL,GAAIqC,OAAMN,EAASE,eAAgBF,EAAST,cAAgBvI,KAAK6H,mBACjE,GAAIyB,OAAMN,EAASE,eAAiBF,EAASG,iBAAkBH,EAAST,cAAgBvI,KAAK6H,mBAC7F7H,KAAK4H,YAAa5H,KAAK6E,gBAAgB,wBAAyB7E,KAAKmH,MACvEnH,MAAKmI,UAAUzC,KAAK0D,GAGtBpJ,KAAKuJ,gBACLvJ,KAAKwJ,YA0EP,MAtEAhE,GAAkBY,UAAUmD,cAAgB,WAE1C,IAAK,GAAI5I,GAAI,EAAGA,EAAIX,KAAKmI,UAAUnH,OAAQL,IAAK,CAC9C,GAAI8I,GAAazJ,KAAKmI,UAAUxH,EADc8I,GAGnClD,SACXkD,EAAWjD,SAMfhB,EAAkBY,UAAUoD,UAAY,WAEtC,IAAK,GAAI7I,GAAI,EAAGA,EAAIX,KAAKkI,MAAMlH,OAAQL,IAAK,CAC1C,GAAIqI,GAAWhJ,KAAKkI,MAAMvH,EAE1BX,MAAKiH,IAAIyC,yBAA2B,kBACpC1J,KAAKiH,IAAIK,KAAOtH,KAAKsH,KAErBtH,KAAKiH,IAAI0C,UAAY,QACrB3J,KAAKiH,IAAI2C,aAAe,MACxB5J,KAAKiH,IAAI4C,SAASb,EAASC,SAAUD,EAASE,eAAgBF,EAAST,eAEvEvI,KAAKiH,IAAI8B,UAAY,EAAI/I,KAAKmH,MAA2B,IAAnBnH,KAAK4H,YAC3C5H,KAAKiH,IAAI6C,YAAc,OACvB9J,KAAKiH,IAAI8C,WAAWf,EAASC,SAAUD,EAASE,eAAgBF,EAAST,iBAK7E/C,EAAkBY,UAAUE,MAAQ,WAEHtG,KAAKwH,oBACpCxH,MAAKwH,sBAAuB,CAC5B,KAAK,GAAI7G,GAAI,EAAGA,EAAIX,KAAKmI,UAAUnH,OAAQL,IAAK,CAC9C,GAAI8I,GAAazJ,KAAKmI,UAAUxH,EAG5B8I,GAAWO,eACbhK,KAAKwH,sBAAuB,GAI5BxH,KAAKwH,uBACP7C,QAAQsF,IAAI,cACZjK,KAAKiH,IAAIiD,UAAU,EAAG,EAAGlK,KAAKgH,OAAO3E,MAAOrC,KAAKgH,OAAO1E,UAW5DkD,EAAkBY,UAAUG,OAAS,aAKrCf,EAAkBY,UAAUI,KAAO,WAE7BxG,KAAKwH,uBACPxH,KAAKuJ,gBACLvJ,KAAKwJ,cAIFhE,SH2KH2E,GAAG,SAASzJ,EAAQjB,EAAOD,GACjC,YAEA,IAAI0B,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,OAAS,eAAkBE,KIpb1O,SAAUE,EAAMC,GACQ,kBAAX9B,IAAyBA,EAAOC,IAEzCD,EAAO,qBAAuB,WAC5B,MAAQ6B,GAAK6I,gBAAkB5I,MAEL,YAAZ,mBAAAhC,GAAA,YAAA0B,EAAA1B,IAIhBC,EAAOD,QAAUgC,IAGjBD,EAAKkE,gBAAkBjE,KAb1BE,OAeO,WA4BN,QAAS+D,GAAgBhC,EAASoB,EAAiBU,GAEjDvF,KAAKyD,QAAUA,EAEfzD,KAAK8G,KAAO9G,KAAKyD,QAAQsD,YAEzB/G,KAAK6E,gBAAkBA,EAEvB7E,KAAKuF,cAAgBA,EACrBvF,KAAKgK,cAAe,EAEpBhK,KAAKgH,OAASpF,SAASG,cAAc,UACrC/B,KAAKiH,IAAMjH,KAAKgH,OAAOE,WAAW,MAElClH,KAAKmH,MAAQtH,OAAOuH,iBACpBpH,KAAKgH,OAAO3E,MAAQrC,KAAKuF,cAAclD,MAAQrC,KAAKmH,MACpDnH,KAAKgH,OAAO1E,OAAStC,KAAKuF,cAAcjD,OAAStC,KAAKmH,MACtDnH,KAAKyD,QAAQV,YAAY/C,KAAKgH,QAC9BhH,KAAKgH,OAAOhF,MAAMK,MAAQrC,KAAKuF,cAAclD,MAAQ,KAErDrC,KAAKiH,IAAIK,KAAOtH,KAAKsH,KAAOtH,KAAKuF,cAActB,UAAY,IAAMsD,EAAcvH,KAAKuF,cAAc1C,SAAU7C,KAAKmH,OAAS,IAAMnH,KAAKuF,cAAcvB,UApBnF,IAuB5D0D,GAAW1H,KAAKiH,IAAIU,YAAY,KAArB,KAvBiD,IAwBZ,QAAhD3H,KAAK6E,gBAAgB,wBAEvB7E,KAAK4H,YAAcF,EAAW,IAG9B1H,KAAK4H,YAAc5H,KAAK6E,gBAAgB,wBAFnC7E,KAIA4H,YAAc/D,WAAW7D,KAAK4H,aAAe5H,KAAKmH,OAMF,QAAnDnH,KAAK6E,gBAAgB,2BAGvB7E,KAAK6H,kBAAoBhE,WAAW7D,KAAKuF,cAAcjD,QAAUtC,KAAKmH,OAAS,EAAInH,KAAKuF,cAAc5B,sBACzD,GAA3C3D,KAAKuF,cAAc5B,uBAA+B3D,KAAK4H,YAAc,MAClE,CAEL,GAAIE,GAAwBjE,WAAW7D,KAAK6E,gBAAgB,2BAFvD7E,MAIA6H,kBAAoBhE,WAAW7D,KAAKuF,cAAcjD,QAAUtC,KAAKmH,OACnE,EAAInH,KAAKuF,cAAc5B,sBACtB3D,KAAKuF,cAAc5B,sBAAwBmE,GAAyB9H,KAAK4H,YAAc,EAG7F,GAAIG,GAAcC,EAAsBhI,KAAK4H,YAAa5H,KAAK6H,kBAC/D7H,MAAK4H,YAAcG,EAAYH,YAC/B5H,KAAK6H,kBAAoBE,EAAYE,KArD2BoC,UAwDpDrK,KAAKiH,IAAIU,YAAY3H,KAAK8G,MAAMzE,MAE5CrC,KAAKoJ,SAAW,GAAIC,cAAarJ,KAAKiH,IACpC,GAAIqC,OAAM,EAAGtJ,KAAK6H,mBAClB,GAAIyB,OAAMe,UAAWrK,KAAK6H,mBAC1B7H,KAAK4H,YAAa5H,KAAK6E,gBAAgB,wBAAyB7E,KAAKmH,OACvEnH,KAAKwJ,YAzFP,GAAIjC,GAAgB,SAAS+C,EAAOC,GAClC,GAAIC,GAAMF,EACNG,EAAIF,EACJG,EAASF,EAAInC,MAAM,kBAHuB,OAKvCqC,GAAO,GAAKD,EAAIC,EAAO,IAG5B1C,EAAwB,SAASJ,EAAaK,GAahD,MAZkB,GAAdL,EACFK,EAAO0C,KAAKC,MAAM3C,EAAO,IAAO,GACvBL,GAAe,IACxBA,EAAc+C,KAAKC,MAAMhD,GAGvBK,EAFEL,EAAc,EAET+C,KAAKC,MAAM3C,EAAO,IAAO,GAGzB0C,KAAKC,MAAM3C,KAIpBL,YAAaA,EACbK,KAAMA,GAsHV,OAhDAxC,GAAgBW,UAAUmD,cAAgB,WAExCvJ,KAAKoJ,SAAS5C,QAGhBf,EAAgBW,UAAUoD,UAAY,WAEpCxJ,KAAKiH,IAAIK,KAAOtH,KAAKsH,KACrBtH,KAAKiH,IAAI2C,aAAe,MAExB5J,KAAKiH,IAAIyC,yBAA2B,kBAEpC1J,KAAKiH,IAAI8B,UAAY,EAAI/I,KAAKmH,MAA2B,IAAnBnH,KAAK4H,YAC3C5H,KAAKiH,IAAI6C,YAAc,OACvB9J,KAAKiH,IAAI4D,YACT7K,KAAKiH,IAAI8C,WAAW/J,KAAK8G,MAAO,GAAK,GAErC9G,KAAKiH,IAAI0C,UAAY,QACrB3J,KAAKiH,IAAI4D,YACT7K,KAAKiH,IAAI4C,SAAS7J,KAAK8G,MAAO,GAAK,IAGrCrB,EAAgBW,UAAUE,MAAQ,WAChCtG,KAAKgK,aAAehK,KAAKoJ,SAASY,aAE9BhK,KAAKoJ,SAASY,cAEhBhK,KAAKiH,IAAIiD,UAAU,EAAG,EAAGlK,KAAKgH,OAAO3E,MAAOrC,KAAKgH,OAAO1E,SAK5DmD,EAAgBW,UAAUG,OAAS,WAE7BvG,KAAKoJ,SAASY,cAChBhK,KAAKoJ,SAAS7C,UAKlBd,EAAgBW,UAAUI,KAAO,WAE3BxG,KAAKgK,eACPhK,KAAKuJ,gBACLvJ,KAAKwJ,cAIF/D,cJgbE,IAAI","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.underlinejs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* Universal Module Definition */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('baselineRatio', [], function () {\n      return root.baselineRatio = factory();\n    });\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.baselineRatio = factory();\n  }\n})(undefined, function () {\n  var baselineRatio = function baselineRatio(elem) {\n    // Get the baseline in the context of whatever element is passed in.\n    elem = elem || document.body;\n\n    // The container is a little defenseive.\n    var container = document.createElement('div');\n    container.style.display = \"block\";\n    container.style.position = \"absolute\";\n    container.style.bottom = \"0\";\n    container.style.right = \"0\";\n    container.style.width = \"0px\";\n    container.style.height = \"0px\";\n    container.style.margin = \"0\";\n    container.style.padding = \"0\";\n    container.style.visibility = \"hidden\";\n    container.style.overflow = \"hidden\";\n\n    // Intentionally unprotected style definition.\n    var small = document.createElement('span');\n    var large = document.createElement('span');\n\n    // Large numbers help improve accuracy.\n    small.style.fontSize = \"0px\";\n    large.style.fontSize = \"2000px\";\n\n    small.innerHTML = \"X\";\n    large.innerHTML = \"X\";\n\n    container.appendChild(small);\n    container.appendChild(large);\n\n    // Put the element in the DOM for a split second.\n    elem.appendChild(container);\n    var smalldims = small.getBoundingClientRect();\n    var largedims = large.getBoundingClientRect();\n    elem.removeChild(container);\n\n    // Calculate where the baseline was, percentage-wise.\n    var baselineposition = smalldims.top - largedims.top;\n    var height = largedims.height;\n\n    return 1 - baselineposition / height;\n  };\n\n  return baselineRatio;\n});\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* Universal Module Definition */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('underline', [], function () {\n      return root.underline = factory();\n    });\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.underline = factory();\n  }\n})(undefined, function () {\n  var baselineRatio = require('./baseline-ratio');\n  var MultipleUnderline = require('./multiple-underline');\n  var SingleUnderline = require('./single-underline');\n\n  function getElementStyles(element) {\n    // lineHeight, height, ratio, fontFamily, fontSize, fontStyle\n    var $this = element;\n\n    var baselinePositionRatio = baselineRatio(element);\n    var lineHeight = parseFloat(window.getComputedStyle($this, null).getPropertyValue(\"line-height\"));\n    var fontFamily = window.getComputedStyle($this, null).getPropertyValue(\"font-family\");\n    var fontSize = window.getComputedStyle($this, null).getPropertyValue(\"font-size\");\n    var fontStyle = window.getComputedStyle($this, null).getPropertyValue(\"font-style\");\n    var width = $this.getBoundingClientRect().width;\n    var height = $this.getBoundingClientRect().height;\n    var parentWidth = $this.parentNode.getBoundingClientRect().width;\n\n    var offsetLeft = $this.offsetLeft;\n    var parentOffsetLeft = $this.parentNode.offsetLeft;\n    var canvasLeft = parentOffsetLeft - offsetLeft;\n    var textIndent = offsetLeft - parentOffsetLeft;\n\n    // canvas.style.left= canvasLeft + 'px';\n    return {\n      lineHeight: lineHeight,\n      width: width,\n      height: height,\n      parentWidth: parentWidth,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontStyle: fontStyle,\n      baselinePositionRatio: baselinePositionRatio,\n      canvasLeft: canvasLeft,\n      textIndent: textIndent\n    };\n  }\n\n  var requestAnimFrame = function (callback) {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      window.setTimeout(callback, 1000 / 60);\n    };\n  }();\n\n  function Underline(element, options) {\n    this.underlines = [];\n\n    if (!element) {\n      console.error('No element defined!');\n    }\n\n    var underlineStyles = {\n      'text-underline-color': options.color || '#000',\n      'text-underline-position': options.position || 'auto', // could be ratio or todo: px\n      'text-underline-skip': options.skip || true,\n      'text-underline-width': options.width || 'auto' // could be auto or px or ratio\n    };\n\n    // if element parameter is a string, query the dom for it,\n    // otherwise just use it\n    element = typeof element === 'string' ? document.querySelectorAll(element) : element;\n\n    ;\n    [].forEach.call(element, function (el) {\n      var elementStyles = getElementStyles(element);\n      var underline;\n      // single line or multiple line?\n      if (elementStyles.height > elementStyles.lineHeight) {\n        underline = new MultipleUnderline(element, underlineStyles, elementStyles);\n      } else {\n        // single line\n        underline = new SingleUnderline(element, underlineStyles, elementStyles);\n      }\n      this.underlines.push(underline);\n    }.bind(this));\n  };\n\n  Underline.prototype.animate = function () {\n    this.underlines.forEach(function (underline) {\n      underline.clear();\n      underline.update();\n      underline.draw();\n    }.bind(this));\n    requestAnimFrame(this.animate);\n  };\n  return Underline;\n});\n\n},{\"./baseline-ratio\":1,\"./multiple-underline\":3,\"./single-underline\":4}],3:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* Universal Module Definition */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('multipleUnderline', [], function () {\n      return root.multipleUnderline = factory();\n    });\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.MultipleUnderline = factory();\n  }\n})(undefined, function () {\n  function MultipleUnderline(element, underlineStyles, elementStyles) {\n    //ctor\n    this.element = element;\n\n    this.text = this.element.textContent;\n\n    this.underlineStyles = underlineStyles;\n\n    // this.elementStyles = getElementStyles(element);\n    this.elementStyles = elementStyles;\n\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext('2d');\n\n    this.ratio = window.devicePixelRatio;\n    this.canvas.width = this.elementStyles.width * this.ratio;\n    this.canvas.height = this.elementStyles.height * this.ratio;\n    // this.canvas.height = this.canvas.clientHeight + this.elementStyles.lineHeight;\n    this.canvas.style.left = this.elementStyles.canvasLeft + 'px';\n    this.element.appendChild(this.canvas);\n    this.canvas.style.width = this.elementStyles.width + 'px';\n\n    this.ctx.font = this.font = this.elementStyles.fontStyle + ' ' + multiplyValue(this.elementStyles.fontSize, this.ratio) + ' ' + this.elementStyles.fontFamily;\n\n    this.multipleRedrawActive = false;\n    if (is_chrome) {\n      // chrome floor the lineheight when it is not a whole number\n      // this.elementStyles.lineHeight = Math.floor(this.elementStyles.lineHeight * this.ratio);\n      this.elementStyles.lineHeight = this.elementStyles.lineHeight * this.ratio;\n    } else {\n      this.elementStyles.lineHeight = this.elementStyles.lineHeight * this.ratio;\n    }\n\n    // determine the text-underline-width / strokeWidth\n    var dotWidth = this.ctx.measureText('.')['width'];\n    if (this.underlineStyles['text-underline-width'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      this.strokeWidth = dotWidth / 12;\n    } else {\n      //if set to px value, todo: other unit such as em?\n      this.strokeWidth = this.underlineStyles['text-underline-width'];\n      //get number value\n      this.strokeWidth = parseFloat(this.strokeWidth) * this.ratio;\n    }\n\n    // determine the text-underline-position / underlinePosition\n    // text-underline-position in ratio, todo: default and user set position ratio\n    if (this.underlineStyles['text-underline-position'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      this.underlinePosition = parseFloat(this.elementStyles.fontSize) * this.ratio * (1 - this.elementStyles.baselinePositionRatio + this.elementStyles.baselinePositionRatio * 0.4) + this.strokeWidth / 2;\n    } else {\n      //if set to ratio value, todo: other unit such as em, px?\n      var userUnderlinePosition = parseFloat(this.underlineStyles['text-underline-position']);\n      // console.log(userUnderlinePosition);\n      this.underlinePosition = parseFloat(this.elementStyles.fontSize) * this.ratio * (1 - this.elementStyles.baselinePositionRatio + this.elementStyles.baselinePositionRatio * userUnderlinePosition) + this.strokeWidth / 2;\n    }\n\n    var adjustValue = optimalStrokeWidthPos(this.strokeWidth, this.underlinePosition);\n    this.strokeWidth = adjustValue.strokeWidth;\n    this.underlinePosition = adjustValue.posY;\n\n    this.lines = [];\n    this.myStrings = [];\n\n    var words = this.text.match(/[^\\s-]+-?\\s?/g);\n    var line = '';\n\n    var linePositionY = 0;\n    var firstLineCount = 0;\n    for (var n = 0; n < words.length; n++) {\n      // add the whitespace after getting the width measurement\n      if (words[n].match(/\\s+$/)) {\n        // the last character of words[n] is whitespace\n        var newWord = words[n].replace(/\\s+$/, '');\n        var testLine = line + newWord;\n        var testLineMetrics = this.ctx.measureText(testLine);\n        var testLineWidth = testLineMetrics.width;\n        testLine = testLine + ' ';\n      } else {\n        var testLine = line + words[n];\n        var testLineMetrics = this.ctx.measureText(testLine);\n        var testLineWidth = testLineMetrics.width;\n      }\n\n      if (!firstLineCount) {\n        //the first line, should consider startingPointX\n        if (testLineWidth + this.elementStyles.textIndent * this.ratio > this.elementStyles.parentWidth * this.ratio && n > 0) {\n          //  draw the underline\n          if (line.match(/\\s+$/)) {\n            // the last character of line is whitespace\n            var lineMetrics = this.ctx.measureText(line.replace(/\\s+$/, ''));\n            var lineWidth = lineMetrics.width;\n          } else {\n            var lineMetrics = this.ctx.measureText(line);\n            var lineWidth = lineMetrics.width;\n          }\n\n          var tempLine = {\n            lineText: line,\n            lineTextIndent: this.elementStyles.textIndent * this.ratio - 0.2,\n            linePositionY: linePositionY,\n            lineMeasureWidth: lineWidth\n          };\n          this.lines.push(tempLine);\n\n          line = words[n];\n          linePositionY += this.elementStyles.lineHeight;\n          firstLineCount++;\n        } else {\n          line = testLine;\n        }\n      } else {\n        if (testLineWidth > this.elementStyles.parentWidth * this.ratio && n > 0) {\n          //  draw the underline\n          if (line.match(/\\s+$/)) {\n            // the last character of line is whitespace\n            var lineMetrics = this.ctx.measureText(line.replace(/\\s+$/, ''));\n            var lineWidth = lineMetrics.width;\n          } else {\n            var lineMetrics = this.ctx.measureText(line);\n            var lineWidth = lineMetrics.width;\n          }\n\n          var tempLine = {\n            lineText: line,\n            lineTextIndent: -0.2,\n            linePositionY: linePositionY,\n            lineMeasureWidth: lineWidth\n          };\n          this.lines.push(tempLine);\n\n          line = words[n];\n          linePositionY += this.elementStyles.lineHeight;\n        } else {\n          line = testLine;\n        }\n      }\n    }\n    // draw the last line\n    //  draw the underline\n    if (line.match(/\\s+$/)) {\n      // the last character of line is whitespace\n      var lineMetrics = this.ctx.measureText(line.replace(/\\s+$/, ''));\n      var lineWidth = lineMetrics.width;\n    } else {\n      var lineMetrics = this.ctx.measureText(line);\n      var lineWidth = lineMetrics.width;\n    }\n\n    var tempLine = {\n      lineText: line,\n      lineTextIndent: -0.2,\n      linePositionY: linePositionY,\n      lineMeasureWidth: lineWidth\n    };\n    this.lines.push(tempLine);\n    for (var i = 0; i < this.lines.length; i++) {\n      var tempLine = this.lines[i];\n      var myString = new GuitarString(this.ctx, new Point(tempLine.lineTextIndent, tempLine.linePositionY + this.underlinePosition), new Point(tempLine.lineTextIndent + tempLine.lineMeasureWidth, tempLine.linePositionY + this.underlinePosition), this.strokeWidth, this.underlineStyles['text-underline-color'], this.ratio);\n      this.myStrings.push(myString);\n    }\n\n    this.drawUnderline();\n    this.drawHoles();\n  }\n\n  MultipleUnderline.prototype.drawUnderline = function () {\n    // draw the underline\n    for (var i = 0; i < this.myStrings.length; i++) {\n      var tempString = this.myStrings[i];\n      // tempString.clear();\n      tempString.update();\n      tempString.draw();\n    }\n  };\n\n  MultipleUnderline.prototype.drawHoles = function () {\n    // draw the font stroke\n    for (var i = 0; i < this.lines.length; i++) {\n      var tempLine = this.lines[i];\n\n      this.ctx.globalCompositeOperation = \"destination-out\";\n      this.ctx.font = this.font;\n\n      this.ctx.fillStyle = 'green';\n      this.ctx.textBaseline = 'top';\n      this.ctx.fillText(tempLine.lineText, tempLine.lineTextIndent, tempLine.linePositionY);\n\n      this.ctx.lineWidth = 2 * this.ratio + this.strokeWidth * 3.6;\n      this.ctx.strokeStyle = 'blue';\n      this.ctx.strokeText(tempLine.lineText, tempLine.lineTextIndent, tempLine.linePositionY);\n    }\n  };\n\n  MultipleUnderline.prototype.clear = function () {\n    // clear\n    var lastMultipleRedrawActive = this.multipleRedrawActive;\n    this.multipleRedrawActive = false;\n    for (var i = 0; i < this.myStrings.length; i++) {\n      var tempString = this.myStrings[i];\n      // this.myString.clear();\n      // console.log(tempString.redrawActive);\n      if (tempString.redrawActive) {\n        this.multipleRedrawActive = true;\n      }\n    }\n    // console.log(this.multipleRedrawActive);\n    if (this.multipleRedrawActive) {\n      console.log('clear now!');\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // if (!lastMultipleRedrawActive && this.multipleRedrawActive) {\n    //     for(var i = 0; i < this.myStrings.length; i++) {\n    //         var tempString = this.myStrings[i];\n    //         tempString.drawLine();\n    //     }\n    // }\n  };\n\n  MultipleUnderline.prototype.update = function () {\n    //update\n  };\n\n  MultipleUnderline.prototype.draw = function () {\n    // draw\n    if (this.multipleRedrawActive) {\n      this.drawUnderline();\n      this.drawHoles();\n    }\n  };\n\n  return MultipleUnderline;\n});\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* Universal Module Definition */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('singleUnderline', [], function () {\n      return root.singleUnderline = factory();\n    });\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.SingleUnderline = factory();\n  }\n})(undefined, function () {\n  var multiplyValue = function multiplyValue(value, multiplier) {\n    var str = value;\n    var m = multiplier;\n    var result = str.match(/(\\d*\\.?\\d*)(.*)/);\n    //http://stackoverflow.com/questions/2868947/split1px-into-1px-1-px-in-javascript\n    return result[1] * m + result[2];\n  };\n\n  var optimalStrokeWidthPos = function optimalStrokeWidthPos(strokeWidth, posY) {\n    if (strokeWidth < 1) {\n      posY = Math.round(posY - 0.5) + 0.5;\n    } else if (strokeWidth >= 1) {\n      strokeWidth = Math.round(strokeWidth);\n      if (strokeWidth % 2) {\n        // odd, posY -> 0.5\n        posY = Math.round(posY - 0.5) + 0.5;\n      } else {\n        // even, posY -> 1\n        posY = Math.round(posY);\n      }\n    }\n    return {\n      strokeWidth: strokeWidth,\n      posY: posY\n    };\n  };\n\n  function SingleUnderline(element, underlineStyles, elementStyles) {\n    //ctor\n    this.element = element;\n\n    this.text = this.element.textContent;\n\n    this.underlineStyles = underlineStyles;\n\n    this.elementStyles = elementStyles;\n    this.redrawActive = false;\n\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext('2d');\n\n    this.ratio = window.devicePixelRatio;\n    this.canvas.width = this.elementStyles.width * this.ratio;\n    this.canvas.height = this.elementStyles.height * this.ratio;\n    this.element.appendChild(this.canvas);\n    this.canvas.style.width = this.elementStyles.width + 'px';\n\n    this.ctx.font = this.font = this.elementStyles.fontStyle + ' ' + multiplyValue(this.elementStyles.fontSize, this.ratio) + ' ' + this.elementStyles.fontFamily;\n\n    // determine the text-underline-width / strokeWidth\n    var dotWidth = this.ctx.measureText('.')['width'];\n    if (this.underlineStyles['text-underline-width'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      this.strokeWidth = dotWidth / 12;\n    } else {\n      //if set to px value, todo: other unit such as em?\n      this.strokeWidth = this.underlineStyles['text-underline-width'];\n      //get number value\n      this.strokeWidth = parseFloat(this.strokeWidth) * this.ratio;\n    }\n\n    // determine the text-underline-position / underlinePosition\n    // text-underline-position in ratio, todo: default and user set position ratio\n    if (this.underlineStyles['text-underline-position'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      // console.log(this.elementStyles.baselinePositionRatio);\n      this.underlinePosition = parseFloat(this.elementStyles.height) * this.ratio * (1 - this.elementStyles.baselinePositionRatio + this.elementStyles.baselinePositionRatio * 0.4) + this.strokeWidth / 2;\n    } else {\n      //if set to ratio value, todo: other unit such as em, px?\n      var userUnderlinePosition = parseFloat(this.underlineStyles['text-underline-position']);\n      // console.log(this.elementStyles.baselinePositionRatio);\n      this.underlinePosition = parseFloat(this.elementStyles.height) * this.ratio * (1 - this.elementStyles.baselinePositionRatio + this.elementStyles.baselinePositionRatio * userUnderlinePosition) + this.strokeWidth / 2;\n    }\n\n    var adjustValue = optimalStrokeWidthPos(this.strokeWidth, this.underlinePosition);\n    this.strokeWidth = adjustValue.strokeWidth;\n    this.underlinePosition = adjustValue.posY;\n\n    // todo: if last character is a space, remove the space\n    textWidth = this.ctx.measureText(this.text).width;\n\n    this.myString = new GuitarString(this.ctx, new Point(0, this.underlinePosition), new Point(textWidth, this.underlinePosition), this.strokeWidth, this.underlineStyles['text-underline-color'], this.ratio);\n    this.drawHoles();\n  }\n\n  SingleUnderline.prototype.drawUnderline = function () {\n    //  draw the underline\n    this.myString.draw();\n  };\n\n  SingleUnderline.prototype.drawHoles = function () {\n    // draw the font stroke\n    this.ctx.font = this.font;\n    this.ctx.textBaseline = 'top';\n\n    this.ctx.globalCompositeOperation = \"destination-out\";\n\n    this.ctx.lineWidth = 2 * this.ratio + this.strokeWidth * 3.6;\n    this.ctx.strokeStyle = 'blue';\n    this.ctx.beginPath();\n    this.ctx.strokeText(this.text, -0.2, 0);\n\n    this.ctx.fillStyle = 'green';\n    this.ctx.beginPath();\n    this.ctx.fillText(this.text, -0.2, 0);\n  };\n\n  SingleUnderline.prototype.clear = function () {\n    this.redrawActive = this.myString.redrawActive;\n    // clear\n    if (this.myString.redrawActive) {\n      // this.myString.clear();\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  };\n\n  SingleUnderline.prototype.update = function () {\n    // update\n    if (this.myString.redrawActive) {\n      this.myString.update();\n    }\n  };\n\n  SingleUnderline.prototype.draw = function () {\n    // draw\n    if (this.redrawActive) {\n      this.drawUnderline();\n      this.drawHoles();\n    }\n  };\n\n  return SingleUnderline;\n});\n\n},{}]},{},[2])(2)\n});\n\n","/* Universal Module Definition */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('baselineRatio', [], function() {\n      return (root.baselineRatio = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.baselineRatio = factory();\n  }\n}(this, function() {\n  var baselineRatio = function(elem) {\n    // Get the baseline in the context of whatever element is passed in.\n    elem = elem || document.body;\n\n    // The container is a little defenseive.\n    var container = document.createElement('div');\n    container.style.display = \"block\";\n    container.style.position = \"absolute\";\n    container.style.bottom = \"0\";\n    container.style.right = \"0\";\n    container.style.width = \"0px\";\n    container.style.height = \"0px\";\n    container.style.margin = \"0\";\n    container.style.padding = \"0\";\n    container.style.visibility = \"hidden\";\n    container.style.overflow = \"hidden\";\n\n    // Intentionally unprotected style definition.\n    var small = document.createElement('span');\n    var large = document.createElement('span');\n\n    // Large numbers help improve accuracy.\n    small.style.fontSize = \"0px\";\n    large.style.fontSize = \"2000px\";\n\n    small.innerHTML = \"X\";\n    large.innerHTML = \"X\";\n\n    container.appendChild(small);\n    container.appendChild(large);\n\n    // Put the element in the DOM for a split second.\n    elem.appendChild(container);\n    var smalldims = small.getBoundingClientRect();\n    var largedims = large.getBoundingClientRect();\n    elem.removeChild(container);\n\n    // Calculate where the baseline was, percentage-wise.\n    var baselineposition = smalldims.top - largedims.top;\n    var height = largedims.height;\n\n    return 1 - (baselineposition / height);\n  }\n\n  return baselineRatio;\n}));\n","/* Universal Module Definition */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('underline', [], function() {\n      return (root.underline = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.underline = factory();\n  }\n}(this, function() {\n  var baselineRatio = require('./baseline-ratio');\n  var MultipleUnderline = require('./multiple-underline');\n  var SingleUnderline = require('./single-underline');\n\n\n  function getElementStyles(element) {\n    // lineHeight, height, ratio, fontFamily, fontSize, fontStyle\n    var $this = element;\n\n    var baselinePositionRatio = baselineRatio(element);\n    var lineHeight = parseFloat(window.getComputedStyle($this, null)\n      .getPropertyValue(\"line-height\"));\n    var fontFamily = window.getComputedStyle($this, null)\n      .getPropertyValue(\"font-family\");\n    var fontSize = window.getComputedStyle($this, null)\n      .getPropertyValue(\"font-size\");\n    var fontStyle = window.getComputedStyle($this, null)\n      .getPropertyValue(\"font-style\");\n    var width = $this.getBoundingClientRect().width;\n    var height = $this.getBoundingClientRect().height;\n    var parentWidth = $this.parentNode.getBoundingClientRect().width;\n\n\n    var offsetLeft = $this.offsetLeft;\n    var parentOffsetLeft = $this.parentNode.offsetLeft;\n    var canvasLeft = parentOffsetLeft - offsetLeft;\n    var textIndent = offsetLeft - parentOffsetLeft;\n\n    // canvas.style.left= canvasLeft + 'px';\n    return {\n      lineHeight: lineHeight,\n      width: width,\n      height: height,\n      parentWidth: parentWidth,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontStyle: fontStyle,\n      baselinePositionRatio: baselinePositionRatio,\n      canvasLeft: canvasLeft,\n      textIndent: textIndent\n    }\n  }\n\n  var requestAnimFrame = (function(callback) {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n      function(callback) {\n        window.setTimeout(callback, 1000 / 60);\n      };\n  })();\n\n  function Underline(element, options) {\n    this.underlines = [];\n\n    if (!element) {\n      console.error('No element defined!');\n    }\n\n    var underlineStyles = {\n      'text-underline-color': options.color || '#000',\n      'text-underline-position': options.position || 'auto', // could be ratio or todo: px\n      'text-underline-skip': options.skip || true,\n      'text-underline-width': options.width || 'auto' // could be auto or px or ratio\n    }\n\n    // if element parameter is a string, query the dom for it,\n    // otherwise just use it\n    element = typeof element === 'string' ? document.querySelectorAll(element) : element;\n\n    ;\n    [].forEach.call(element, function(el) {\n      var elementStyles = getElementStyles(element);\n      var underline;\n      // single line or multiple line?\n      if (elementStyles.height > elementStyles.lineHeight) {\n        underline = new MultipleUnderline(element, underlineStyles, elementStyles);\n      } else {\n        // single line\n        underline = new SingleUnderline(element, underlineStyles, elementStyles);\n      }\n      this.underlines.push(underline);\n    }.bind(this));\n  };\n\n  Underline.prototype.animate = function() {\n    this.underlines.forEach(function(underline) {\n      underline.clear();\n      underline.update();\n      underline.draw();\n    }.bind(this))\n    requestAnimFrame(this.animate);\n  };\n  return Underline;\n}));\n","/* Universal Module Definition */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('multipleUnderline', [], function() {\n      return (root.multipleUnderline = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.MultipleUnderline = factory();\n  }\n}(this, function() {\n  function MultipleUnderline(element, underlineStyles, elementStyles) {\n    //ctor\n    this.element = element;\n\n    this.text = this.element.textContent;\n\n    this.underlineStyles = underlineStyles;\n\n    // this.elementStyles = getElementStyles(element);\n    this.elementStyles = elementStyles;\n\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext('2d');\n\n\n    this.ratio = window.devicePixelRatio;\n    this.canvas.width = this.elementStyles.width * this.ratio;\n    this.canvas.height = this.elementStyles.height * this.ratio;\n    // this.canvas.height = this.canvas.clientHeight + this.elementStyles.lineHeight;\n    this.canvas.style.left = this.elementStyles.canvasLeft + 'px';\n    this.element.appendChild(this.canvas);\n    this.canvas.style.width = this.elementStyles.width + 'px';\n\n    this.ctx.font = this.font = this.elementStyles.fontStyle + ' ' + multiplyValue(this.elementStyles.fontSize, this.ratio) + ' ' + this.elementStyles.fontFamily;\n\n    this.multipleRedrawActive = false;\n    if (is_chrome) {\n      // chrome floor the lineheight when it is not a whole number\n      // this.elementStyles.lineHeight = Math.floor(this.elementStyles.lineHeight * this.ratio);\n      this.elementStyles.lineHeight = this.elementStyles.lineHeight * this.ratio;\n    } else {\n      this.elementStyles.lineHeight = this.elementStyles.lineHeight * this.ratio;\n    }\n\n    // determine the text-underline-width / strokeWidth\n    var dotWidth = this.ctx.measureText('.')['width'];\n    if (this.underlineStyles['text-underline-width'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      this.strokeWidth = dotWidth / 12;\n    } else {\n      //if set to px value, todo: other unit such as em?\n      this.strokeWidth = this.underlineStyles['text-underline-width'];\n      //get number value\n      this.strokeWidth = parseFloat(this.strokeWidth) * this.ratio;\n    }\n\n    // determine the text-underline-position / underlinePosition\n    // text-underline-position in ratio, todo: default and user set position ratio\n    if (this.underlineStyles['text-underline-position'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      this.underlinePosition = parseFloat(this.elementStyles.fontSize) * this.ratio * (1 - this.elementStyles.baselinePositionRatio +\n        this.elementStyles.baselinePositionRatio * 0.4) + this.strokeWidth / 2;\n    } else {\n      //if set to ratio value, todo: other unit such as em, px?\n      var userUnderlinePosition = parseFloat(this.underlineStyles['text-underline-position']);\n      // console.log(userUnderlinePosition);\n      this.underlinePosition = parseFloat(this.elementStyles.fontSize) * this.ratio *\n        (1 - this.elementStyles.baselinePositionRatio +\n          this.elementStyles.baselinePositionRatio * userUnderlinePosition) + this.strokeWidth / 2;\n    }\n\n\n    var adjustValue = optimalStrokeWidthPos(this.strokeWidth, this.underlinePosition);\n    this.strokeWidth = adjustValue.strokeWidth;\n    this.underlinePosition = adjustValue.posY;\n\n    this.lines = [];\n    this.myStrings = [];\n\n    var words = this.text.match(/[^\\s-]+-?\\s?/g);\n    var line = '';\n\n    var linePositionY = 0;\n    var firstLineCount = 0;\n    for (var n = 0; n < words.length; n++) {\n      // add the whitespace after getting the width measurement\n      if (words[n].match(/\\s+$/)) {\n        // the last character of words[n] is whitespace\n        var newWord = words[n].replace(/\\s+$/, '');\n        var testLine = line + newWord;\n        var testLineMetrics = this.ctx.measureText(testLine);\n        var testLineWidth = testLineMetrics.width;\n        testLine = testLine + ' ';\n      } else {\n        var testLine = line + words[n];\n        var testLineMetrics = this.ctx.measureText(testLine);\n        var testLineWidth = testLineMetrics.width;\n      }\n\n      if (!firstLineCount) {\n        //the first line, should consider startingPointX\n        if (testLineWidth + this.elementStyles.textIndent * this.ratio > this.elementStyles.parentWidth * this.ratio && n > 0) {\n          //  draw the underline\n          if (line.match(/\\s+$/)) {\n            // the last character of line is whitespace\n            var lineMetrics = this.ctx.measureText(line.replace(/\\s+$/, ''));\n            var lineWidth = lineMetrics.width;\n          } else {\n            var lineMetrics = this.ctx.measureText(line);\n            var lineWidth = lineMetrics.width;\n          }\n\n          var tempLine = {\n            lineText: line,\n            lineTextIndent: this.elementStyles.textIndent * this.ratio - 0.2,\n            linePositionY: linePositionY,\n            lineMeasureWidth: lineWidth\n          }\n          this.lines.push(tempLine)\n\n          line = words[n];\n          linePositionY += this.elementStyles.lineHeight;\n          firstLineCount++;\n        } else {\n          line = testLine;\n        }\n      } else {\n        if (testLineWidth > this.elementStyles.parentWidth * this.ratio && n > 0) {\n          //  draw the underline\n          if (line.match(/\\s+$/)) {\n            // the last character of line is whitespace\n            var lineMetrics = this.ctx.measureText(line.replace(/\\s+$/, ''));\n            var lineWidth = lineMetrics.width;\n          } else {\n            var lineMetrics = this.ctx.measureText(line);\n            var lineWidth = lineMetrics.width;\n          }\n\n          var tempLine = {\n            lineText: line,\n            lineTextIndent: -0.2,\n            linePositionY: linePositionY,\n            lineMeasureWidth: lineWidth\n          }\n          this.lines.push(tempLine);\n\n          line = words[n];\n          linePositionY += this.elementStyles.lineHeight;\n        } else {\n          line = testLine;\n        }\n      }\n    }\n    // draw the last line\n    //  draw the underline\n    if (line.match(/\\s+$/)) {\n      // the last character of line is whitespace\n      var lineMetrics = this.ctx.measureText(line.replace(/\\s+$/, ''));\n      var lineWidth = lineMetrics.width;\n    } else {\n      var lineMetrics = this.ctx.measureText(line);\n      var lineWidth = lineMetrics.width;\n    }\n\n    var tempLine = {\n      lineText: line,\n      lineTextIndent: -0.2,\n      linePositionY: linePositionY,\n      lineMeasureWidth: lineWidth\n    }\n    this.lines.push(tempLine);\n    for (var i = 0; i < this.lines.length; i++) {\n      var tempLine = this.lines[i];\n      var myString = new GuitarString(\n        this.ctx,\n        new Point(tempLine.lineTextIndent, tempLine.linePositionY + this.underlinePosition),\n        new Point(tempLine.lineTextIndent + tempLine.lineMeasureWidth, tempLine.linePositionY + this.underlinePosition),\n        this.strokeWidth, this.underlineStyles['text-underline-color'], this.ratio);\n      this.myStrings.push(myString);\n    }\n\n    this.drawUnderline();\n    this.drawHoles();\n\n  }\n\n  MultipleUnderline.prototype.drawUnderline = function() {\n    // draw the underline\n    for (var i = 0; i < this.myStrings.length; i++) {\n      var tempString = this.myStrings[i];\n      // tempString.clear();\n      tempString.update();\n      tempString.draw();\n    }\n\n  };\n\n\n  MultipleUnderline.prototype.drawHoles = function() {\n    // draw the font stroke\n    for (var i = 0; i < this.lines.length; i++) {\n      var tempLine = this.lines[i];\n\n      this.ctx.globalCompositeOperation = \"destination-out\";\n      this.ctx.font = this.font;\n\n      this.ctx.fillStyle = 'green';\n      this.ctx.textBaseline = 'top';\n      this.ctx.fillText(tempLine.lineText, tempLine.lineTextIndent, tempLine.linePositionY);\n\n      this.ctx.lineWidth = 2 * this.ratio + this.strokeWidth * 3.6;\n      this.ctx.strokeStyle = 'blue';\n      this.ctx.strokeText(tempLine.lineText, tempLine.lineTextIndent, tempLine.linePositionY);\n\n    }\n  }\n\n  MultipleUnderline.prototype.clear = function() {\n    // clear\n    var lastMultipleRedrawActive = this.multipleRedrawActive;\n    this.multipleRedrawActive = false;\n    for (var i = 0; i < this.myStrings.length; i++) {\n      var tempString = this.myStrings[i];\n      // this.myString.clear();\n      // console.log(tempString.redrawActive);\n      if (tempString.redrawActive) {\n        this.multipleRedrawActive = true;\n      }\n    }\n    // console.log(this.multipleRedrawActive);\n    if (this.multipleRedrawActive) {\n      console.log('clear now!')\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // if (!lastMultipleRedrawActive && this.multipleRedrawActive) {\n    //     for(var i = 0; i < this.myStrings.length; i++) {\n    //         var tempString = this.myStrings[i];\n    //         tempString.drawLine();\n    //     }\n    // }\n\n  };\n\n  MultipleUnderline.prototype.update = function() {\n    //update\n  };\n\n\n  MultipleUnderline.prototype.draw = function() {\n    // draw\n    if (this.multipleRedrawActive) {\n      this.drawUnderline();\n      this.drawHoles();\n    }\n  };\n\n  return MultipleUnderline;\n}));\n","/* Universal Module Definition */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as a named AMD module.\n    define('singleUnderline', [], function() {\n      return (root.singleUnderline = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.SingleUnderline = factory();\n  }\n}(this, function() {\n  var multiplyValue = function(value, multiplier) {\n    var str = value;\n    var m = multiplier;\n    var result = str.match(/(\\d*\\.?\\d*)(.*)/);\n    //http://stackoverflow.com/questions/2868947/split1px-into-1px-1-px-in-javascript\n    return result[1] * m + result[2];\n  }\n\n  var optimalStrokeWidthPos = function(strokeWidth, posY) {\n    if (strokeWidth < 1) {\n      posY = Math.round(posY - 0.5) + 0.5;\n    } else if (strokeWidth >= 1) {\n      strokeWidth = Math.round(strokeWidth);\n      if (strokeWidth % 2) {\n        // odd, posY -> 0.5\n        posY = Math.round(posY - 0.5) + 0.5;\n      } else {\n        // even, posY -> 1\n        posY = Math.round(posY);\n      }\n    }\n    return {\n      strokeWidth: strokeWidth,\n      posY: posY\n    }\n  }\n\n  function SingleUnderline(element, underlineStyles, elementStyles) {\n    //ctor\n    this.element = element;\n\n    this.text = this.element.textContent;\n\n    this.underlineStyles = underlineStyles;\n\n    this.elementStyles = elementStyles;\n    this.redrawActive = false;\n\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext('2d');\n\n    this.ratio = window.devicePixelRatio;\n    this.canvas.width = this.elementStyles.width * this.ratio;\n    this.canvas.height = this.elementStyles.height * this.ratio;\n    this.element.appendChild(this.canvas);\n    this.canvas.style.width = this.elementStyles.width + 'px';\n\n    this.ctx.font = this.font = this.elementStyles.fontStyle + ' ' + multiplyValue(this.elementStyles.fontSize, this.ratio) + ' ' + this.elementStyles.fontFamily;\n\n    // determine the text-underline-width / strokeWidth\n    var dotWidth = this.ctx.measureText('.')['width'];\n    if (this.underlineStyles['text-underline-width'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      this.strokeWidth = dotWidth / 12;\n    } else {\n      //if set to px value, todo: other unit such as em?\n      this.strokeWidth = this.underlineStyles['text-underline-width'];\n      //get number value\n      this.strokeWidth = parseFloat(this.strokeWidth) * this.ratio;\n    }\n\n\n    // determine the text-underline-position / underlinePosition\n    // text-underline-position in ratio, todo: default and user set position ratio\n    if (this.underlineStyles['text-underline-position'] == \"auto\") {\n      // if set to auto, calculate the optimized width based on font\n      // console.log(this.elementStyles.baselinePositionRatio);\n      this.underlinePosition = parseFloat(this.elementStyles.height) * this.ratio * (1 - this.elementStyles.baselinePositionRatio +\n        this.elementStyles.baselinePositionRatio * 0.4) + this.strokeWidth / 2;\n    } else {\n      //if set to ratio value, todo: other unit such as em, px?\n      var userUnderlinePosition = parseFloat(this.underlineStyles['text-underline-position']);\n      // console.log(this.elementStyles.baselinePositionRatio);\n      this.underlinePosition = parseFloat(this.elementStyles.height) * this.ratio *\n        (1 - this.elementStyles.baselinePositionRatio +\n          this.elementStyles.baselinePositionRatio * userUnderlinePosition) + this.strokeWidth / 2;\n    }\n\n    var adjustValue = optimalStrokeWidthPos(this.strokeWidth, this.underlinePosition);\n    this.strokeWidth = adjustValue.strokeWidth;\n    this.underlinePosition = adjustValue.posY;\n\n    // todo: if last character is a space, remove the space\n    textWidth = this.ctx.measureText(this.text).width;\n\n    this.myString = new GuitarString(this.ctx,\n      new Point(0, this.underlinePosition),\n      new Point(textWidth, this.underlinePosition),\n      this.strokeWidth, this.underlineStyles['text-underline-color'], this.ratio);\n    this.drawHoles();\n\n  }\n\n  SingleUnderline.prototype.drawUnderline = function() {\n    //  draw the underline\n    this.myString.draw();\n  }\n\n  SingleUnderline.prototype.drawHoles = function() {\n    // draw the font stroke\n    this.ctx.font = this.font;\n    this.ctx.textBaseline = 'top';\n\n    this.ctx.globalCompositeOperation = \"destination-out\";\n\n    this.ctx.lineWidth = 2 * this.ratio + this.strokeWidth * 3.6;\n    this.ctx.strokeStyle = 'blue';\n    this.ctx.beginPath();\n    this.ctx.strokeText(this.text, -0.2, 0);\n\n    this.ctx.fillStyle = 'green';\n    this.ctx.beginPath();\n    this.ctx.fillText(this.text, -0.2, 0);\n  }\n\n  SingleUnderline.prototype.clear = function() {\n    this.redrawActive = this.myString.redrawActive;\n    // clear\n    if (this.myString.redrawActive) {\n      // this.myString.clear();\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  };\n\n\n  SingleUnderline.prototype.update = function() {\n    // update\n    if (this.myString.redrawActive) {\n      this.myString.update();\n    }\n  };\n\n\n  SingleUnderline.prototype.draw = function() {\n    // draw\n    if (this.redrawActive) {\n      this.drawUnderline();\n      this.drawHoles();\n    }\n  };\n\n  return SingleUnderline;\n}));\n"],"sourceRoot":"/source/"}